

Exercise 1:

Question: 

Explain the purpose of unit tests in the context of the `addBook` and 
`removeBook` functions in bookManager.js. 

How do unit tests fit into the software development lifecycle for this module?

Unit tests are part of the development phase of the software development lifecycle. 
They help ensure that functions performs their specific, intended task by isolating
them with unit testing. A unit test for addBook ensures that a book can be succesfully
pushed into the array books and a unit test for removeBook ensures that a book can be 
succesfully removed from the array books.

Exercise 2:

Question: 

Describe the differences between manual testing and automated unit testing for 
the `findBooksByAuthor` function. 

What are the benefits of using automated tests in this case?
Automated unit testing is faster and more accurate than manual testing which
would require a person manually checking each function. A unit test for findBooksByAuthor
could test multiple scenarios. A person would take much longer to test the same
number of scenarios.



Exercise 3:

Question: 

Implement test-driven development (TDD) by writing a test for a 
new function `updateBookTitle(oldTitle, newTitle)` in bookManager.js before 
implementing it. 

The function should update the title of a book.


Exercise 4:

Question: 

Write a simple unit test using Jest's `test` and 
expect functions to test `addBook`.



Exercise 5:

Question: 

Use different matchers to test `removeBook`, 
including the case where the book is not found.



Exercise 6:

Question: 

Structure test files using `describe` blocks to group tests for 
addBook, removeBook, updateBook, and findBooksByAuthor functions.



Exercise 7:

Question: 

Use hooks (beforeAll, afterAll, beforeEach, afterEach) to 
perform setup and teardown tasks for tests involving the books array.



Exercise 8:

Question: 

Use matchers like toBe, toEqual, toContain, toMatch, 
toBeTruthy, toBeFalsy, and toThrow in tests for 
various functions in bookManager.js.



Exercise 9:

Question: 

Explain the differences between strict and loose equality checks in Jest, 
and demonstrate with examples using toBe, toEqual, and toStrictEqual for 
objects.



Exercise 10:

Question: 

Create mock functions to isolate tests and avoid dependencies on fs in 
loadBooks and saveBooks. 

Mock the fs.readFile and fs.writeFile methods.



Exercise 11:

Question: 

Use Jest's automock feature to automatically mock the 
fs module and test loadBooks.



Exercise 12:

Question: 

Write manual mocks to customize the behavior of loadBooks for 
testing different scenarios, such as successful data retrieval and errors.



Exercise 13:

Question: 

Use spies to monitor calls to addBook and assert they were called correctly.



Exercise 14:

Question: 

Measure code coverage and understand metrics like statement, 
branch, function, and line coverage. 

Run Jest to generate a coverage report for bookManager.js.



Exercise 15:

Question: 

Collect coverage statistics using Jest and configure thresholds to 
enforce code quality. 

Set a threshold of 90% for statements, functions, and lines, 
and 80% for branches in jest.config.js.



Exercise 16:

Question: 

Explain how code coverage metrics like statement, branch, function, 
and line coverage help in assessing code quality for bookManager.js.

Code coverage metrics help identity which parts of the code have been tested for proper functionality.
An HTML file can be opened to help visualize the code coverage. The file has useful tools such as highlighting
lines covered by the tests. 

Exercise 17:

Question: 

Discuss the importance of code coverage thresholds and how they 
enforce code quality in a project like bookManager.js.

With thresholds, Jest will flag if less than the determine percentage is covered by tests.
Code coverage metrics can be relative to the stage in a project as thresholds can be increased as more and more tests are added.
Git pre-commit hooks can prevent commits if coverage is below the certain thresholds.

Exercise 18:

Question: 

Configure Jest to collect coverage only from bookManager.js and 
exclude other files or directories.

